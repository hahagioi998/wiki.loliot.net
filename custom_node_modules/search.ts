/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import toString from 'mdast-util-to-string';
import visit, { Visitor } from 'unist-util-visit';
import { toValue } from '../utils';
import type { TOCItem as TOC } from '@docusaurus/types';
import type { Node } from 'unist';
import type { Heading } from 'mdast';

// Visit all headings. We `slug` all headings (to account for
// duplicates), but only take h2 and h3 headings.
export default function search(node: Node): TOC[] {
  const headings: TOC[] = [];
  const minDepth = 2;
  const maxDepth = 5;
  const current = Array(maxDepth - minDepth + 1).fill(-1);
  let previousDepth = 0;

  const visitor: Visitor<Heading> = (child, _index, parent) => {
    /*
     * {
     *    type: 'heading',
     *    position: ...,
     *    depth: 1,
     *    data: { hProperties: { id: 'xxx' }, id: 'xxx' }
     *    children: [ { type: 'text', value: 'xxx', position: [Position] } ],
     * }
     */

    const value = toString(child);

    if (
      parent !== node ||
      !value ||
      child.depth > maxDepth ||
      child.depth < minDepth
    ) {
      return;
    }

    const entry: TOC = {
      value: toValue(child),
      id: child.data!.id as string,
      children: [],
    };

    console.log(child.depth);

    const currentIndex = child.depth - minDepth;

    if (!headings.length || previousDepth >= child.depth) {
      current.fill(-1, currentIndex + 1);
    }
    previousDepth = child.depth;

    let table = headings;
    for (let i = 0; i < currentIndex; i++) {
      table = table[current[i]].children;
    }
    table.push(entry);
    current[currentIndex] += 1;
  };

  visit(node, 'heading', visitor);

  return headings;
}
