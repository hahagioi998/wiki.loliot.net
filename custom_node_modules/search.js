/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @ts-check

const toString = require('mdast-util-to-string');
const visit = require('unist-util-visit');
// Destructuring require tslib
// eslint-disable-next-line prefer-destructuring
const toValue = require('../utils').toValue;

/** @typedef {import('@docusaurus/types').TOCItem} TOC */
/** @typedef {import('unist').Node} Node */

/**
 * @typedef {Object} StringValuedNode
 * @property {string} type
 * @property {string} value
 * @property {number} depth
 * @property {Object} data
 * @property {StringValuedNode[]} children
 */

// Visit all headings. We `slug` all headings (to account for
// duplicates), but only take h2 and h3 headings.
/**
 * @param {StringValuedNode} node
 * @returns {TOC[]}
 */
function search(node) {
  /** @type {TOC[]} */
  const headings = [];
  const minDepth = 2;
  const maxDepth = 5;
  const current = Array(maxDepth - minDepth + 1).fill(-1);
  let previousDepth = 0;

  /**
   * @param {StringValuedNode} child
   * @param {number} index
   * @param {Node | undefined} parent
   * @returns {void}
   */
  const onHeading = (child, index, parent) => {
    /*
     * {
     *    type: 'heading',
     *    position: ...,
     *    depth: 1,
     *    data: { hProperties: { id: 'xxx' }, id: 'xxx' }
     *    children: [ { type: 'text', value: 'xxx', position: [Position] } ],
     * }
     */
    const value = toString(child);

    if (
      parent !== node ||
      !value ||
      child.depth > maxDepth ||
      child.depth < minDepth
    ) {
      return;
    }

    const entry = {
      value: toValue(child),
      id: child.data.id,
      children: [],
    };

    const currentIndex = child.depth - minDepth;

    if (!headings.length || previousDepth >= child.depth) {
      current.fill(-1, currentIndex + 1);
    }
    previousDepth = child.depth;

    let table = headings;
    for (let i = 0; i < currentIndex; i++) {
      table = table[current[i]].children;
    }
    table.push(entry);
    current[currentIndex] += 1;
  };

  visit(node, 'heading', onHeading);

  return headings;
}

module.exports = search;
